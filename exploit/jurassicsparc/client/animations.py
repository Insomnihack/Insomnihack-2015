from Tkinter import *
from ttk import *
from PIL import Image, ImageTk
try:
    import tkSnack
except:
    print '[-] No sound support: install snack'


def anim_gif(name):
    im = Image.open(name)
    gif = {
        'frames': [],
        'delay': 100,
        'loc' : 0,
        'len' : 0
    }
    pics = []

    try:
        while True:
            pics.append(im.copy())
            im.seek(len(pics))
    except EOFError:
        pass

    temp = pics[0].convert('RGBA')
    gif['frames'] = [ImageTk.PhotoImage(temp)]
    temp = pics[0]

    for item in pics[1:]:
        temp.paste(item)
        gif['frames'].append(ImageTk.PhotoImage(temp.convert('RGBA')))

    try:
        gif['delay'] = im.info['duration']
    except:
        pass

    gif['len'] = len(gif['frames'])

    return gif


class AnimationReboot(object):
    def __init__(self, seconds, parent):
        self.seconds = seconds
        self.parent = parent
        self.cont = True

        self.animate()

    def animate(self):

        """ Decrement the reboot counter and updates the label """

        if not self.cont:
            self.parent.rebootWindow.destroy()
            return

        self.parent.rebootLabel.set("Reboot in %d seconds" % self.seconds)
        self.seconds -= 1

        if self.seconds == 0:
            self.cont = False
            self.parent.doRebootAction()

        self.parent.rebootWindow.after(1000, self.animate)


class AnimationAccessSecurityGrid(object):

    ANIMATION_INPUT_TEXT = 0
    ANIMATION_COMPUTER_RESPONSE = 1
    ANIMATION_COMPUTER_RESPONSE_SLOW = 2

    def __init__(self, parent):

        """
        Init the console animation that automatically enters text.
        The base sequence will loop on the magic word error, but an
        authentication callback is provided to check whether our
        credentials / magic word are valid. If they are, the sequence
        is replaced with the auth_sequence,
        """

        self.parent = parent
        self.consoleText = parent.consoleText
        self.sequences = [
            (self.ANIMATION_COMPUTER_RESPONSE,
             "Jurassic Sparc, System Security Interface\n" + \
             "Version 4.0.5, Alpha E\n" + \
             "Ready...\n> ", None),
            (self.ANIMATION_INPUT_TEXT, "access security\n", None),
            (self.ANIMATION_COMPUTER_RESPONSE, "access: PERMISSION DENIED.\n> ", None),
            (self.ANIMATION_INPUT_TEXT, "access security grid\n", None),
            (self.ANIMATION_COMPUTER_RESPONSE, "access: PERMISSION DENIED.\n> ", None),
            (self.ANIMATION_INPUT_TEXT, "access main security grid\n", None),
            (self.ANIMATION_COMPUTER_RESPONSE, "access: PERMISSION DENIED.", self.authentication),
            (self.ANIMATION_COMPUTER_RESPONSE_SLOW, "...and...\n", None)
        ]
        self.auth_sequences = [
            (self.ANIMATION_COMPUTER_RESPONSE, "Login: ", None),
            (self.ANIMATION_INPUT_TEXT, self.parent.settings['login'] + "\n", None),
            (self.ANIMATION_COMPUTER_RESPONSE , "Password: ", None),
            (self.ANIMATION_INPUT_TEXT, '*' * len(self.parent.settings['password']) + "\n", None)
        ]
        self.seq = 0
        self.max_sequence = len(self.sequences)
        self.stop_flood = 300
        self.txtPos = 0
        self.txtMaxPos = 0
        self.magic_ok = False
        self.popupLaunched = False
        self.playingSound = False
        self.cont = True
        self.animate()

    def authentication(self):

        """
        Callback, authenticates the user over the network, and adapt the
        animation sequence when necessary.
        """

        try:
            res, msg = self.parent.protocol.authenticate(self.parent.settings['login'],
                                                         self.parent.settings['password'])
        except:
            self.cont = False
            self.parent.networkIssueAction()
            return

        if res == 1:
            # auth fail + magic word
            return

        self.seq = 0
        self.magic_ok = True

        if res == 0:
            # auth fail
            self.auth_sequences.append(
                (self.ANIMATION_COMPUTER_RESPONSE, "access: ACCESS DENIED.", None)
            )
            self.sequences = self.auth_sequences
            self.max_sequence = len(self.sequences)
        elif res == 2:
            # auth succeed
            self.auth_sequences.append(
                (self.ANIMATION_COMPUTER_RESPONSE, "access: ACCESS GRANTED.\n", None),
            )
            # msg is the flag for part 1
            self.auth_sequences.append((self.ANIMATION_COMPUTER_RESPONSE, "\n" + msg, None))
            self.sequences = self.auth_sequences
            self.max_sequence = len(self.sequences)

    def animate(self):

        """
        Called on each sequence. If a sequence is a text input, it is divided
        in x sub-sequences, where x is the text's length.
        Calls the callback if provided for the current sequence.
        """

        if not self.cont:
            return

        self.consoleText.config(state=NORMAL)

        if self.seq < self.max_sequence:
            seq_type, seq_text, callback = self.sequences[self.seq]
            timer = 50

            if callback:
                callback()
                seq_type, seq_text, callback = self.sequences[self.seq]

            if seq_type in (self.ANIMATION_COMPUTER_RESPONSE,
                            self.ANIMATION_COMPUTER_RESPONSE_SLOW):
                txt = seq_text
                self.seq += 1
                timer = 500

                if seq_type == self.ANIMATION_COMPUTER_RESPONSE_SLOW:
                    timer = 1000
            else:
                if self.txtPos == 0:
                    self.txtMaxPos = len(seq_text)

                txt = seq_text[self.txtPos]
                self.txtPos += 1

                if self.txtPos == self.txtMaxPos:
                    self.seq += 1
                    self.txtPos = 0
        else:
            if self.magic_ok:
                self.cont = False
                self.consoleText.config(state=DISABLED)
                return

            txt = "YOU DIDN'T SAY THE MAGIC WORD!\n"
            timer = 100
            self.seq += 1

            if self.seq == self.stop_flood:
                self.consoleText.config(state=DISABLED)
                return

            if not self.playingSound:
                self.playingSound = True
                self.playsound()

            if not self.popupLaunched:
                self.popupLaunched = True
                self.magicpopup()

        self.consoleText.insert(END, txt)
        self.consoleText.config(state=DISABLED)

        self.consoleText.after(timer, self.animate)

    def playsound(self):

        """ Play the Magic Word sound, if tkSnack is installed """

        try:
            tkSnack.initializeSnack(self.consoleText)
            mysound = tkSnack.Sound()
            mysound.read('magicword.wav')
            mysound.play()
        except:
            print "[-] Cannot play sound"

    def magicpopup(self):

        """
        Popup with Dennis Nedry GIF.
        GIFs are not already animated in Tkinter, so we create the animation
        ourselves...
        """

        t = Toplevel()
        t.geometry("540x348+300+300")
        t.resizable(0, 0)
        t.wm_title("You didn't say the magic word!")

        label1 = Label(t, text="Help")
        label1.grid(row=1)

        t.rowconfigure(1, weight=2)
        t.columnconfigure(0, weight=1)

        t.display = Canvas(t)
        t.display.grid(row=1,sticky=N+E+S+W)
        t.cont = True
        t.gif = anim_gif('magic_word.gif')
        self.t = t

        self.animategif()

    def show(self,image=None,event=None):

        """ Display the gif image """

        self.t.display.create_image((0, 0),anchor=NW, image=image)

    def animategif(self,event=None):

        """ Animate the MagicWord GIF """

        self.show(image=self.t.gif['frames'][self.t.gif['loc']])
        self.t.gif['loc'] += 1

        if self.t.gif['loc'] == self.t.gif['len']:
            self.t.gif['loc'] = 0

        if self.t.cont:
            self.t.after(150, self.animategif)
