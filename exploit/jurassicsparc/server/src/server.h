#ifndef _SERVER_H
# define _SERVER_H

#define _GNU_SOURCE
#include <arpa/inet.h>
#include <errno.h>
#include <pwd.h>
#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <sys/un.h>
#include <unistd.h>
#include <grp.h>
#include <time.h>
#include <sys/sendfile.h>
#include <openssl/sha.h>

#define CHALL_PORT             9090
#define CHALL_USER             "jurassicsparc"
#define TIMEOUT                900
#define MAGIC_WORD             0xB17C497EA5E
#define CREDS_DB               "./credsdb"
#define FLAG_PART_1            "./flag_part1"
#define DEVNULL                "/dev/null"

#define PACKET_HELLO           0
#define PACKET_AUTH            1
#define PACKET_REBOOT          2
#define PACKET_SUCCESS         254
#define PACKET_FAIL            255

#define UNKNOWN_COMMAND        "Unkwnown command"
#define INVALID_TOKEN          "Invalid token"
#define BACKUP_FAIL            "Reboot: failed to perform backup..."
#define BACKUP_SUCCESS         "System Ready"
#define MSG_TOO_LONG           "Message too long"
#define REBOOT_PREFIX          "Reboot: "
#define AUTH_REQUIRED          "Authentication required"

#define ffprintf(client, ...)   do { fprintf(client, __VA_ARGS__); fflush(client); } while (0);

typedef struct {
	long long magic;
	unsigned token;
	unsigned authenticated;
} user_t;

extern user_t user;
extern int debug;

typedef struct __attribute__((packed)) {
	long long magic; 	/* The magic word */
	unsigned token; 	/* Unique auth token, per-session */
	short type; 		/* Type of packet: reboot, clone, remove, login... */
	unsigned size; 		/* Size of the packet */
} packet;

typedef struct __attribute__((packed)) {
	unsigned login_size;
	unsigned password_size;
	unsigned data;
} pkt_auth;

typedef struct __attribute__((packed)) {
	unsigned message; /* variable length, needs memset after use */
} pkt_reboot;

typedef struct __attribute__((packed)) {
	char message[200];
	int in_fd;
	int out_fd;
} backup_infos;

int cmd_unknown(int sockfd);
int cmd_tokenfail(int sockfd);
int cmd_auth(int sockfd, packet *pkt, pkt_auth *auth);
int cmd_reboot(int sockfd, packet *pkt, pkt_reboot *reboot);

int drop_privs(char *username);
ssize_t recvlen(int fd, char *buf, size_t n);
ssize_t recv_until(int fd, char *buf, size_t n, char stop);
ssize_t sendlen(int fd, const char *buf, size_t n);
ssize_t sendstr(int fd, const char *str);
int gen_token(void);
void *xmalloc(unsigned size);
void *xfree(void *ptr, size_t size);

#endif /* _SERVER_H! */
